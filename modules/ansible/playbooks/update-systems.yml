---
- name: 'Update all systems and prep for kubernetes'
  hosts: all
  gather_facts: true
  vars_files:
    - vars.yml
  vars:
    - SOURCE_PATH: "../../030-certificate-authority"
    - K8S_VERSION: "v1.27.6"
  tasks:
    - name: "Update apt packages on DEB based systems"
      ansible.builtin.apt:
        upgrade=yes
        update_cache=yes
      register: apt_status
      until: apt_status is success
      delay: 10
      retries: 10
      tags:
        - packages
      when: ansible_facts['os_family'] == "Debian"

    - name: "Enumerate all controllers and workers within the hosts file"
      ansible.builtin.blockinfile:
        dest: /etc/hosts
        marker: "# {mark} ANSIBLE MANAGED: kubernetes hosts"
        content: |
          {% for host in groups['workers'] %}
          {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_hostname }}
          {% endfor %}
          {% for host in groups['controllers'] %}
          {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_hostname }}
          {% endfor %}
      register: hosts_file
      tags:
        - configuration
      changed_when: hosts_file.changed

    - name: "Install required apt packages for kubernetes worker nodes"
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - socat
        - conntrack
        - ipset
      register: pkgs_installed
      tags:
        - packages
      changed_when: pkgs_installed.changed
      when: inventory_hostname in groups['workers']

    - name: "Install required apt packages helm on bastion host"
      ansible.builtin.apt:
        name: apt-transport-https
        state: present
      register: apt_transport_installed
      tags:
        - packages
      changed_when: apt_transport_installed.changed
      when: inventory_hostname in groups['bastion']

    - name: "Copy files to bastion for kubectl cluster interaction"
      ansible.builtin.copy:
        src: "{{ SOURCE_PATH }}/{{ cert_file }}"
        dest: /root/{{ cert_file }}
        owner: root
        group: root
        mode: "0600"
      loop:
        - ca.pem
        - admin.pem
        - admin-key.pem
      loop_control:
        loop_var: cert_file
      when: inventory_hostname in groups['bastion']

    - name: "Install kubectl on bastion host for running commands against the cluster"
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ K8S_VERSION }}/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        owner: root
        group: root
        mode: "0755"
      when: inventory_hostname in groups['bastion']


    - name: "Set cluster in kubectl config"
      ansible.builtin.shell:
        cmd: |
          kubectl config set-cluster kubernetes-the-hard-way \
            --certificate-authority=/root/ca.pem \
            --embed-certs=true \
            --server=https://{{ loadbalancer_fqdn }}:6443
      register: cluster_set
      changed_when: false
      when: inventory_hostname in groups['bastion']

    - name: "Set admin credentials for kubectl"
      ansible.builtin.shell:
        cmd: |
          kubectl config set-credentials admin \
            --client-certificate=/root/admin.pem \
            --client-key=/root/admin-key.pem
      register: credentials_set
      changed_when: false
      when: inventory_hostname in groups['bastion']

    - name: "Set kubectl context for cluster"
      ansible.builtin.shell:
        cmd: |
          kubectl config set-context kubernetes-the-hard-way \
            --cluster=kubernetes-the-hard-way \
            --user=admin
      register: context_set
      changed_when: false
      when: inventory_hostname in groups['bastion']

    - name: "Set kubectl to use default context for cluster"
      ansible.builtin.shell:
        cmd: |
          kubectl config use-context kubernetes-the-hard-way
      register: context_use
      changed_when: false
      when: inventory_hostname in groups['bastion']

    - name: "Download helm installer script"
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /root/get_helm.sh
        mode: "0700"
      register: helm_key
      changed_when: helm_key is changed
      when: inventory_hostname in groups['bastion']

    - name: "Run helm installer on bastion host"
      ansible.builtin.shell: |
        bash /root/get_helm.sh
      register: helm_install_status
      changed_when: helm_install_status.rc != 0
      when: inventory_hostname in groups['bastion']

    - name: "Download the kubectl binary, add to path and mark as executable on bastion"
      ansible.builtin.get_url:
        url: https://storage.googleapis.com/kubernetes-release/release/{{ K8S_VERSION }}/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        owner: root
        group: root
        mode: "0755"
      when: inventory_hostname in groups['bastion']

    - name: "Create required kubernetes directories on worker nodes"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes/opt
        - /var/run/kubernetes
        - /root/containerd
        - /etc/containerd

      register: worker_directories_created
      changed_when: worker_directories_created.changed
      when: inventory_hostname in groups['workers']

    - name: "Create etcd and kubernetes directories on control plane nodes"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "0700"
      loop:
        - /etc/etcd
        - /var/lib/etcd
        - /var/lib/kubernetes/
        - /etc/kubernetes/config
      register: controller_directories_created
      changed_when: controller_directories_created.changed
      when: inventory_hostname in groups['controllers']


    - name: "Disable SWAP since kubernetes can't work with swap enabled (1/2)"
      ansible.builtin.shell: |
        swapoff -a
      register: swap_status
      changed_when: swap_status.rc != 0
      when: inventory_hostname in groups['workers']

    - name: "Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)"
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      register: swap_fstab
      changed_when: swap_fstab.rc != 0
      when: inventory_hostname in groups['workers']

    - name: "Reboot the all worker and control nodes after and updating and system prep"
      ansible.builtin.reboot:
        reboot_timeout: 120
        msg: "Reboot initiated by Ansible for kubernetes prep"
      tags:
        - reboot
      when: inventory_hostname in groups['workers'] or inventory_hostname in groups['controllers']
