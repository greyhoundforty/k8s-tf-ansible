---
- name: "Generate kubeconfigs for cluster authentication and communication"
  gather_facts: true
  hosts: all
  vars_files:
    - vars/cluster-vars.yml
  vars:
    - FILES_PATH: "../files"
    - CONTROLLER_PATH: "{{ FILES_PATH }}/control_plane"
    - CA_PATH: "{{ FILES_PATH }}/certificate_authority"
    - GENERATED_PATH: "{{ CA_PATH }}/generated"
    - TEMPLATES_PATH: "../templates"
  tasks:
    - name: "Generate a kubeconfig file for each worker node"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-cluster kubernetes-the-hard-way \
          --certificate-authority=ca.pem \
          --embed-certs=true \
          --server=https://{{ loadbalancer_fqdn }}:6443 \
          --kubeconfig={{ inventory_hostname }}.kubeconfig
      register: worker_kconfig
      delegate_to: localhost
      when: inventory_hostname in groups['workers']
      failed_when: worker_kconfig.rc != 0
      changed_when: worker_kconfig.rc == 0

    - name: "Set kubectl credentials in kubeconfig file for each worker node"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-credentials "system:node:{{ inventory_hostname }}" \
          --client-certificate="{{ inventory_hostname }}.pem" \
          --client-key="{{ inventory_hostname }}-key.pem" \
          --embed-certs=true --kubeconfig="{{ inventory_hostname }}.kubeconfig"
      register: worker_creds
      delegate_to: localhost
      when: inventory_hostname in groups['workers']
      failed_when: worker_creds.rc != 0
      changed_when: worker_creds.rc == 0

    - name: "Set kubectl context in kubeconfig file for each worker node"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-context default --cluster=kubernetes-the-hard-way \
          --user="system:node:{{ inventory_hostname }}" \
          --kubeconfig="{{ inventory_hostname }}.kubeconfig"
      register: worker_context
      delegate_to: localhost
      when: inventory_hostname in groups['workers']
      failed_when: worker_context.rc != 0
      changed_when: worker_context.rc == 0

    - name: "Set kubectl to use default context for each worker node"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config use-context default --kubeconfig="{{ inventory_hostname }}.kubeconfig"\
      register: worker_use_context
      delegate_to: localhost
      when: inventory_hostname in groups['workers']
      failed_when: worker_use_context.rc != 0
      changed_when: worker_use_context.rc == 0

    - name: "Generate a kubeconfig file for the kube-proxy service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-cluster kubernetes-the-hard-way \
          --certificate-authority=ca.pem \
          --embed-certs=true \
          --server=https://{{ loadbalancer_fqdn }}:6443 \
          --kubeconfig=kube-proxy.kubeconfig
      register: proxy_kconfig
      delegate_to: localhost
      when: inventory_hostname in groups['workers']
      failed_when: proxy_kconfig.rc != 0
      changed_when: proxy_kconfig.rc == 0

    - name: "Set credentials in kubeconfig file for the kube-proxy service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl set-credentials system:kube-proxy \
        --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem \
        --embed-certs=true \
        --kubeconfig=kube-proxy.kubeconfig
      register: proxy_creds
      delegate_to: localhost
      failed_when: proxy_creds.rc != 0
      changed_when: proxy_creds.rc == 0

    - name: "Set context in kubeconfig file for the kube-proxy service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-context default --cluster=kubernetes-the-hard-way \
          --user=system:kube-proxy \
          --kubeconfig=kube-proxy.kubeconfig
      register: proxy_context
      delegate_to: localhost
      failed_when: proxy_context.rc != 0
      changed_when: proxy_context.rc == 0

    - name: "Set kubectl to use default context for the kube-proxy service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
      register: proxy_use_context
      delegate_to: localhost
      failed_when: proxy_use_context.rc != 0
      changed_when: proxy_use_context.rc == 0

    - name: "Generate a kubeconfig file for the kube-controller-manager service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-cluster kubernetes-the-hard-way \
          --certificate-authority=ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=kube-controller-manager.kubeconfig
      register: controller_kconfig
      delegate_to: localhost
      failed_when: controller_kconfig.rc != 0
      changed_when: controller_kconfig.rc == 0

    - name: "Set credentials in kubeconfig file for the kube-controller-manager service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-credentials system:kube-controller-manager \
          --client-certificate=kube-controller-manager.pem \
          --client-key=kube-controller-manager-key.pem \
          --embed-certs=true \
          --kubeconfig=kube-controller-manager.kubeconfig
      register: controller_creds
      delegate_to: localhost
      failed_when: controller_creds.rc != 0
      changed_when: controller_creds.rc == 0

    - name: "Set context in kubeconfig file for the kube-controller-manager service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-context default --cluster=kubernetes-the-hard-way \
          --user=system:kube-controller-manager \
          --kubeconfig=kube-controller-manager.kubeconfig
      register: controller_context
      delegate_to: localhost
      failed_when: controller_context.rc != 0
      changed_when: controller_context.rc == 0

    - name: "Set kubectl to use default context for the kube-controller-manager service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
      register: controller_use_context
      delegate_to: localhost
      failed_when: controller_use_context.rc != 0
      changed_when: controller_use_context.rc == 0

    - name: "Generate a kubeconfig file for the kube-scheduler service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-cluster kubernetes-the-hard-way \
          --certificate-authority=ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=kube-scheduler.kubeconfig
      register: scheduler_kconfig
      delegate_to: localhost
      failed_when: scheduler_kconfig.rc != 0
      changed_when: scheduler_kconfig.rc == 0

    - name: "Set credentials in kubeconfig file for the kube-scheduler service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-credentials system:kube-scheduler \
          --client-certificate=kube-scheduler.pem \
          --client-key=kube-scheduler-key.pem \
          --embed-certs=true \
          --kubeconfig=kube-scheduler.kubeconfig
      register: scheduler_creds
      delegate_to: localhost
      failed_when: scheduler_creds.rc != 0
      changed_when: scheduler_creds.rc == 0

    - name: "Set context in kubeconfig file for the kube-scheduler service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-context default --cluster=kubernetes-the-hard-way \
          --user=system:kube-scheduler \
          --kubeconfig=kube-scheduler.kubeconfig
      register: scheduler_context
      delegate_to: localhost
      failed_when: scheduler_context.rc != 0
      changed_when: scheduler_context.rc == 0

    - name: "Set kubectl to use default context for the kube-scheduler service"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
      register: scheduler_use_context
      delegate_to: localhost
      failed_when: scheduler_use_context.rc != 0
      changed_when: scheduler_use_context.rc == 0


    - name: "Generate a kubeconfig file for the admin user"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-cluster kubernetes-the-hard-way \
          --certificate-authority=ca.pem \
          --embed-certs=true \
          --server=https://127.0.0.1:6443 \
          --kubeconfig=admin.kubeconfig
      register: admin_kconfig
      delegate_to: localhost
      failed_when: admin_kconfig.rc != 0
      changed_when: admin_kconfig.rc == 0

    - name: "Set credentials in kubeconfig file for the admin user"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-credentials admin \
          --client-certificate=admin.pem \
          --client-key=admin-key.pem \
          --embed-certs=true \
          --kubeconfig=admin.kubeconfig
      register: admin_creds
      delegate_to: localhost
      failed_when: admin_creds.rc != 0
      changed_when: admin_creds.rc == 0

    - name: "Set context in kubeconfig file for the admin user"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config set-context default --cluster=kubernetes-the-hard-way \
          --user=admin \
          --kubeconfig=admin.kubeconfig
      register: admin_context
      delegate_to: localhost
      failed_when: admin_context.rc != 0
      changed_when: admin_context.rc == 0

    - name: "Set kubectl to use default context for the admin user"
      args:
        chdir: "{{ GENERATED_PATH }}"
      ansible.builtin.shell: |
        set -o pipefail
        kubectl config use-context default --kubeconfig=admin.kubeconfig
      register: admin_use_context
      delegate_to: localhost
      failed_when: admin_use_context.rc != 0
      changed_when: admin_use_context.rc == 0

    - name: "Generate encryption-config.yaml file secret"
      ansible.builtin.shell: |
        set -o pipefail
        head -c 32 /dev/urandom | base64
      register: encryption_secret
      delegate_to: localhost
      failed_when: encryption_secret.rc != 0
      changed_when: encryption_secret.rc == 0

    - name: "Create encryption-config.yaml file"
      ansible.builtin.template:
        src: "{{ TEMPLATES_PATH }}/encryption-config.yaml.j2"
        dest: "{{ GENERATED_PATH }}/encryption-config.yaml"
        mode: "0644"
        vars:
          encryption_secret: "{{ encryption_secret.stdout }}"
      register: encryption_config
      failed_when: encryption_config.rc != 0
      changed_when: encryption_config.rc == 0

